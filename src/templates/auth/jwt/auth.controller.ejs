import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import User from '../models/User.js';

export async function register(req, res) {
  const { username, password, ...extra } = req.body;

  try {
    const exists = <%- preset.findByUsername %>;
    if (exists) return res.status(400).json({ error: 'User already exists' });

    const hashedPassword = await bcrypt.hash(password, 10); // sal=10

    const user = new User({
      username,
      password: hashedPassword,
      role: 'user',
      ...extra
    });

    await user.save();
    res.status(201).json({ message: 'User registered.' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

export async function login(req, res) {
  const { username, password } = req.body;

  try {
    const user = <%- preset.findByUsername %>;
    if (!user) return res.status(401).json({ error: 'Invalid credentials' });

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(401).json({ error: 'Invalid credentials' });

    const token = jwt.sign(
      { id: user._id, username: user.username, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({ token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

export async function promoteToAdmin(req, res) {
  const { username } = req.params;

  try {
    const user = await <%- preset.findByUsername %>;
    if (!user) return res.status(404).json({ error: 'User not found' });

    user.role = 'admin';
    await user.save();

    res.json({ message: `User ${username} promoted to admin` });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
